; ActiveState version of xdebug
; Use ActiveState version if you want Code Profiling in Komodo IDE. "It is built specifically for debugging in Komodo."
; Code Profiling - Analyze code performance function-by-function and detect hotspots. The code profiler analyzes programs on a function-by-function basis, tracking which function calls are made, and how long calls take to complete. Code profiling supports PHP 5.2 and higher. 
;zend_extension=/opt/komodo-ide-910/lib/support/php/debugging/5.5/xdebug.so
; Default xdebug
zend_extension=xdebug.so

; xdebug config
; profiler turned off to save disk space and so that trigger can control on-off
xdebug.profiler_enable=0
; Start profiling by appending Request (XDEBUG_PROFILE=1  ( in the GET/POST request to your script ). eg: localhost/index.php?XDEBUG_PROFILE=1
xdebug.profiler_enable_trigger = 1
; Output DIR default is /tmp. Uncomment and change if needed.
; xdebug.profiler_output_dir=/tmp
xdebug.remote_enable = 1
;xdebug.remote_connect_back = 1
xdebug.remote_handler = dbgp
xdebug.remote_port = 9000
xdebug.remote_mode=req
xdebug.remote_host=127.0.0.1
xdebug.remote_port=9000
;idekey is optional and used with the DBGP proxy (multi-user).
;xdebug.idekey=<idekey> 

; Memory profiling and conservation
; In order to prevent Xdebug to generate trace files for each request, you need to set xdebug.auto_trace to 0.
xdebug.auto_trace = 0
xdebug.show_mem_delta = 1

; Value	Description
; 0	shows a human readable indented trace file with: time index, memory usage, memory delta (if the setting xdebug.show_mem_delta is enabled), level, function name, function parameters (if the setting xdebug.collect_params is enabled), filename and line number.
; 1	writes a computer readable format which has two different records. There are different records for entering a stack frame, and leaving a stack frame. The table below lists the fields in each type of record. Fields are tab separated.
; 2	writes a trace formatted in (simple) HTML.
xdebug.trace_format = 1
; When this setting is set to 1, you can trigger the generation of trace files by using the XDEBUG_TRACE GET/POST parameter, or set a cookie with the name XDEBUG_TRACE. 
xdebug.trace_enable_trigger = 1
;xdebug.trace_output_dir = "/tmp"
